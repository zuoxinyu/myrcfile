if filereadable(expand("~/.vim/autoload/plug.vim"))
    filetype off
    set rtp+=$GOPATH/src/github.com/golang/lint/misc/vim
    let g:coc_global_extensions = [
     \ 'coc-git',
     \ 'coc-explorer',
     \ 'coc-json',
     \ 'coc-css',
     \ 'coc-html',
     \ 'coc-yaml',
     \ 'coc-markdownlint',
     \ 'coc-pyright',
     \ 'coc-tsserver',
     \ 'coc-vetur',
     \ 'coc-highlight',
     \ 'coc-rust-analyzer'
    \ ]
    let g:use_nvim_lsp = (0 && has('nvim-0.5'))

    call plug#begin()

    " UI {
        Plug 'ryanoasis/vim-devicons'
        Plug 'vim-airline/vim-airline'
        Plug 'vim-airline/vim-airline-themes'
        Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
        Plug 'morhetz/gruvbox'
    "}
    " Management {
        Plug 'skywind3000/asyncrun.vim'
        Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
        Plug 'junegunn/fzf.vim'
        Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
        Plug 'vim-scripts/SudoEdit.vim', {'on': 'SudoWrite'}
        Plug 'voldikss/vim-floaterm'
        if (g:use_nvim_lsp == 1)
            Plug 'neovim/nvim-lspconfig'
            Plug 'kabouzeid/nvim-lspinstall'
            Plug 'nvim-lua/completion-nvim' "nvim build-in lsp doesn't support auto complete
        else
            Plug 'neoclide/coc.nvim', {'branch': 'release'}
            Plug 'antoinemadec/coc-fzf'
        endif
    "}
    " Dev {
        Plug 'majutsushi/tagbar'
        Plug 'scrooloose/nerdcommenter'
        Plug 'Lokaltog/vim-easymotion'
        Plug 'kien/rainbow_parentheses.vim'
        Plug 'nathanaelkane/vim-indent-guides' ", {'on': 'IndentGuidesEnable'}
        Plug 'vim-scripts/Align', {'on': 'Align'}
        "Plug 'vim-scripts/ShowPairs'
        Plug 'jiangmiao/auto-pairs'
        "Plug 'vim-scripts/vcscommand.vim'
        Plug 'mhinz/vim-signify'
        Plug 'tpope/vim-fugitive'
        "Plug 'Shougo/echodoc.vim'
        "Plug 'ludovicchabant/vim-gutentags'
        "Plug 'rizzatti/dash.vim', {'on': 'Dash'}
    "}

    " Language Spec {
        "Plug 'vim-scripts/std_c.zip', {'for': 'c'}
        Plug 'jackguo380/vim-lsp-cxx-highlight', {'for': 'cpp'}
        Plug 'octol/vim-cpp-enhanced-highlight', {'for': 'cpp'}
        "Plug 'ilyachur/cmake4vim', {'for': ['cpp', 'c', 'cmake']}
        "Plug 'fatih/vim-go', {'for': 'go'}
        Plug 'ekalinin/Dockerfile.vim', {'for': 'Dockerfile'}
        Plug 'kevinhui/vim-docker-tools', {'for': 'Dockerfile'}
        Plug 'mzlogin/vim-markdown-toc', {'for': 'markdown'}
        Plug 'rust-lang/rust.vim', {'for': 'rust'}
        "Plug 'leafgarland/typescript-vim', {'for': 'ts'}
        "Plug 'peitalin/vim-jsx-typescript', {'for': 'tsx'}
        "Plug 'leafOfTree/vim-vue-plugin'
        Plug 'mattn/emmet-vim', {'for': ['html', 'vue', 'jsx']}
        "Plug 'posva/vim-vue', {'for': 'vue'}
        "Plug 'pangloss/vim-javascript', {'for': 'js'}
        "Plug 'mxw/vim-jsx', {'for': 'jsx'}
        "Plug 'derekwyatt/vim-fswitch', { 'for': 'c' }
        "Plug 'vim-vdebug/vdebug', { 'for': 'php' }
        "Plug 'klen/python-mode', {'for': 'python'}
    "}

    " Misc {
        "Plug 'MarcWeber/vim-addon-mw-utils'
        "Plug 'Valloric/YouCompleteMe'
        "Plug 'ervandew/supertab'
        Plug 'https://github.com/adelarsq/vim-matchit'
        if has('nvim-0.5')
            Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update
        endif
        "Plug 'honza/vim-snippets'
        Plug 'sjl/gundo.vim'
        "Plug 'tomtom/tlib_vim'
        "Plug 'tpope/vim-surround'
        "Plug 'vim-scripts/VOoM'
        "Plug 'vim-scripts/YankRing.vim'
        "Plug 'SirVer/ultisnips'
        Plug 'rlue/vim-barbaric'
        Plug 'voldikss/vim-translator'
    "}

    call plug#end()

    filetype plugin indent on
    syntax on
"Plugin-wise Configuration {
    "3rd colorscheme {
        colorscheme gruvbox
        " Fix background color under transparent terminals
        highlight Normal     ctermbg=NONE guibg=NONE
        highlight NonText    ctermbg=NONE guibg=NONE
        highlight LineNr     ctermbg=NONE guibg=NONE
        highlight SignColumn ctermbg=NONE guibg=NONE

        " highlight trailing spaces
        highlight ExtraWhitespace ctermbg=red guibg=red
        match ExtraWhitespace /\s\+$/

    "}

    "Coc.vim {
    function EnableCoc()
        echo 'using coc key mapping'
        " Use tab for trigger completion with characters ahead and navigate.
        " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
       function! s:check_back_space() abort
          let col = col('.') - 1
          return !col || getline('.')[col - 1]  =~# '\s'
        endfunction

        function! s:show_documentation()
          "if (index(['vim','help'], &filetype) >= 0)
          "  execute 'h '.expand('<cword>')
          "else
          call CocAction('doHover')
          "endif
        endfunction

        " Use `:Format` to format current buffer
        command! -nargs=0 Format :call CocAction('format')

        " Use `:Fold` to fold current buffer
        command! -nargs=? Fold :call CocAction('fold', <f-args>)

        " Use `:OR to organize imports`
        command! -nargs=0 OR   :call CocAction('runCommand', 'editor.action.organizeImport')

        " Split if dest file is not current file
        function! s:smart_jump(line)
          let args = split(a:line, ' ')
          let cursorcmd = args[1]
          let file = args[2]
          let current_file = fnameescape(fnamemodify(expand('%'), ':~:.'))
          if (file != current_file)
            execute 'split +call\ '.cursorcmd.' '.file
          else
            execute 'call '.cursorcmd
          endif
        endfunction

        " Custom jump command
        command! -nargs=? CocSmartJump :call s:smart_jump(<f-args>)
        " auto format and import
        autocmd BufWritePre *.go :call CocActionAsync('runCommand', 'editor.action.organizeImport')
        " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
        " Coc only does snippet and additional edit on confirm.
        imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
        imap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
        " Remap keys for gotos
        imap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : coc#refresh()
        imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

        " Highlight symbol under cursor on CursorHold
        autocmd CursorHold * silent call CocActionAsync('highlight')

        hi CocHighlightText  ctermfg=Yellow guifg=#ffff00 ctermbg=NONE
        hi CocHighlightRead  ctermfg=Green  guifg=#00ff00 ctermbg=NONE
        hi CocHighlightWrite ctermfg=Red    guifg=#ff0000 ctermbg=NONE

        augroup mygroup
          autocmd!
          " Setup formatexpr specified filetype(s).
          autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
          " Update signature help on jump placeholder
          autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
        augroup end

        set statusline ^=%{coc#status()}

        " Use `[c` and `]c` to navigate diagnostics
        nmap <silent> [c <Plug>(coc-diagnostic-prev)
        nmap <silent> ]c <Plug>(coc-diagnostic-next)
        " Use <c-space> to trigger completion.
        imap <silent><expr> <c-space> coc#refresh()
        nmap <silent> gd <Plug>(coc-definition)
        nmap <silent> gs :call CocAction('jumpDefinition', 'split')<CR>
        nmap <silent> gv :call CocAction('jumpDefinition', 'vsplit')<CR>
        nmap <silent> gt :call CocAction('jumpDefinition', 'tabe')<CR>
        nmap <silent> gy <Plug>(coc-type-definition)
        nmap <silent> gi <Plug>(coc-implementation)
        nmap <silent> gr <Plug>(coc-references)
        nmap <silent> K :call <SID>show_documentation()<CR>
        " Remap for do codeAction of current line
        nmap <silent><nowait> <leader>ac  <Plug>(coc-codeaction)
        " Fix autofix problem of current line
        nmap <silent><nowait> <leader>qf  <Plug>(coc-fix-current)
        " Remap for rename current word
        nmap <silent><nowait> <leader>rn <Plug>(coc-rename)

        nmap <silent> <leader>rr :CocRestart<CR>

        " Coc FZF
        let g:coc_fzf_preview = ''
        let g:coc_fzf_opts = []

        nmap <silent><nowait> <leader>f :<C-u>CocFzfList<CR>
        nmap <silent><nowait> <leader>a :<C-u>CocFzfList actions<CR>
        nmap <silent><nowait> <leader>c :<C-u>CocFzfList commands<CR>
        nmap <silent><nowait> <leader>e :<C-u>CocCommand explorer<CR>
		nmap <silent><nowait> <leader>d :<C-u>CocFzfList gstatus<cr>
		nmap <silent><nowait> <leader>m :<C-u>CocFzfList commits<cr>
		nmap <silent><nowait> <leader>x :<C-u>CocFzfList extensions<cr>
		nmap <silent><nowait> <leader>g :<C-u>CocFzfList diagnostics<cr>
		nmap <silent><nowait> <space>p  :<C-u>CocFzfListResume<CR>
		nmap <silent><nowait> <space>t  :<C-u>CocFzfList symbols<CR>
        nmap <silent><nowait> <space>f  :call CocAction('format')<CR>

        nmap <silent><nowait> <C-t>     :<C-u>CocFzfList outline<CR>
        nmap <silent><nowait> <C-f>     :<C-U><C-R>=printf("CocSearch %s", expand("<cword>"))<CR>

        xmap if <Plug>(coc-funcobj-i)
        omap if <Plug>(coc-funcobj-i)
        xmap af <Plug>(coc-funcobj-a)
        omap af <Plug>(coc-funcobj-a)
        xmap ic <Plug>(coc-classobj-i)
        omap ic <Plug>(coc-classobj-i)
        xmap ac <Plug>(coc-classobj-a)
        omap ac <Plug>(coc-classobj-a)

        " Remap <C-f> and <C-b> for scroll float windows/popups.
        if has('nvim-0.4.0') || has('patch-8.2.0750')
            nnoremap <silent><nowait><expr> <C-j> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
            nnoremap <silent><nowait><expr> <C-k> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
            inoremap <silent><nowait><expr> <C-j> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
            inoremap <silent><nowait><expr> <C-k> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
            vnoremap <silent><nowait><expr> <C-j> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
            vnoremap <silent><nowait><expr> <C-k> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
        endif
        " Use CTRL-S for selections ranges.
        " Requires 'textDocument/selectionRange' support of language server.
        nmap <silent> <C-s> <Plug>(coc-range-select)
        xmap <silent> <C-s> <Plug>(coc-range-select)
    endfunction
    " }

    "LSPConfig{
    function EnableLSP()
        echo 'using lsp key mapping'
lua <<EOF
        local nvim_lsp = require('lspconfig')

        local on_attach = function(client, bufnr)
          local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
          local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

          buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

          -- Mappings.
          local opts = { noremap=true, silent=true }
          buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
          buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
          buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
          buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
          buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
          buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
          buf_set_keymap('n', 'gT', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
          buf_set_keymap('n', '[c', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
          buf_set_keymap('n', ']c', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
          buf_set_keymap('n', ']l', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
          buf_set_keymap('n', '[l', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
          buf_set_keymap('n', '<leader>a', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
          buf_set_keymap('n', '<leader>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
          buf_set_keymap('n', '<leader>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
          buf_set_keymap('n', '<leader>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
          buf_set_keymap('n', '<leader>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)

          -- Set some keybinds conditional on server capabilities
          if client.resolved_capabilities.document_formatting then
            buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
          end
          if client.resolved_capabilities.document_range_formatting then
            buf_set_keymap("v", "<space>f", "<cmd>lua vim.lsp.buf.range_formatting()<CR>", opts)
          end

          -- Set autocommands conditional on server_capabilities
          if client.resolved_capabilities.document_highlight then
            vim.api.nvim_exec([[
              hi LspReferenceText  cterm=bold ctermbg=NONE guibg=#888888
              hi LspReferenceRead  cterm=bold ctermbg=NONE guibg=NONE guifg=green
              hi LspReferenceWrite cterm=bold ctermbg=NONE guibg=NONE guifg=red
              augroup lsp_document_highlight
                autocmd! * <buffer>
                autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()
                autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
              augroup END
            ]], false)
          end
        end

        -- Use a loop to conveniently both setup defined servers
        -- and map buffer local keybindings when the language server attaches
        local servers = {
            "pyright",
            "rust_analyzer",
            "tsserver",
            "ccls",
            "cmake",
            "gopls",
            "bashls",
            "vimls",
            "jsonls",
            "cssls",
            "html",
            "vimls",
            "vuels",
            "yamlls"
        }

        for _, lsp in ipairs(servers) do
            nvim_lsp[lsp].setup {
                on_attach = on_attach,
                settings = {
                },
                Lua = {
                    runtime = {
                        version = 'LuaJIT'
                    },
                },
            }
        end
EOF
        imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
        imap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
        imap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
        imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
        imap <silent> <c-p> <Plug>(completion_trigger)
        nmap <silent> <leader>rr :LspRestart<CR>

        set completeopt=menuone,noinsert,noselect

        let g:completion_enable_auto_popup = 1
        let g:completion_trigger_on_delete = 1
        let g:completion_matching_strategy_list = ['exact', 'substring', 'fuzzy', 'all']

        autocmd BufEnter * lua require'completion'.on_attach()
    endfunction
    "}

    "TreeSitter {
        "set foldmethod=expr
        "set foldexpr=nvim_treesitter#foldexpr()

        if has('nvim-0.5')
lua <<EOF
            require'nvim-treesitter.configs'.setup {
              ensure_installed = "maintained", -- one of "all", "maintained" (parsers with maintainers), or a list of languages
              highlight = {
                  enable = true,              -- false will disable the whole extension
                  -- disable = { "c", "rust"  },  -- list of language that will be disabled
              },
            }
EOF
        endif
    "}

    "TagBar {
        nmap <F9> :TagbarToggle<CR>
        let g:tagbar_type_go = {
                    \ 'ctagstype' : 'go',
                    \ 'kinds'     : [
                        \ 'p:package',
                        \ 'i:imports:1',
                        \ 'c:constants',
                        \ 'v:variables',
                        \ 't:types',
                        \ 'n:interfaces',
                        \ 'w:fields',
                        \ 'e:embedded',
                        \ 'm:methods',
                        \ 'r:constructor',
                        \ 'f:functions'
                    \ ],
                    \ 'sro' : '.',
                    \ 'kind2scope' : {
                        \ 't' : 'ctype',
                        \ 'n' : 'ntype'
                    \ },
                    \ 'scope2kind' : {
                        \ 'ctype' : 't',
                        \ 'ntype' : 'n'
                    \ },
                    \ 'ctagsbin'  : 'gotags',
                    \ 'ctagsargs' : '-sort -silent'
                    \ }
    "}TagBar

    "NerdTree {
        "nmap <F10> :NERDTreeToggle<CR>
        "autocmd vimenter * NERDTree "Auto open at start vim
        let NERDTreeShowBookmarks=1
        let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$', '\.ui$', '^\node_modules$']
        let NERDTreeChDirMode=0
        let NERDTreeQuitOnOpen=0
        let NERDTreeMouseMode=2
        let NERDTreeShowHidden=0 "显示隐藏文件
        let NERDTreeKeepTreeInNewTab=1
        let g:nerdtree_tabs_open_on_gui_startup=1
    "}NerdTree

    "Rainbow {
        au VimEnter * RainbowParenthesesToggle
        au Syntax * RainbowParenthesesLoadRound
        au Syntax * RainbowParenthesesLoadSquare
        au Syntax * RainbowParenthesesLoadBraces
    "}

    "Easymotion {
        let g:Easymotion_do_shade = 0
        let g:Easymotion_use_upper = 1
        let g:Easymotion_keys = 'ASDFGHJKLQWERTYUIOP;'
        let g:Easymotion_inc_highlight = 0
        hi EasyMotionTarget ctermbg=none ctermfg=green
    "}

    "Airline{
        let g:airline_theme='simple'
        let g:airline_extensions = ['branch', 'coc', 'fugitiveline', 'quickfix', 'tabline',  'tagbar']
        let g:airline_powerline_fonts = 1
        let g:airline#extensions#quickfix#quickfix_text = 'Quickfix'
        let g:airline#extensions#coc#enabled = 1
        let g:airline#extensions#tabline#enabled = 1
        let g:airline#extensions#tagbar#enabled = 1
        let g:airline#extensions#branch#enabled = 1
        let g:airline#extensions#branch#vcs_priority = ["git"]
        let g:airline#extensions#branch#empty_message = 'branch:empty'
        let g:airline#extensions#nrrwrgn#enabled = 1
        let g:airline_left_sep = ''
        let g:airline_right_sep = ''
        let g:airline_left_alt_sep = ''
        let g:airline_right_alt_sep = ''
    "}

    "gutentags {
        " gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
        let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

        " 所生成的数据文件的名称
        let g:gutentags_ctags_tagfile = '.tags'

        " 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
        let s:vim_tags = expand('~/.cache/tags')
        let g:gutentags_cache_dir = s:vim_tags

        " 配置 ctags 的参数
        let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
        let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
        let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

        " 检测 ~/.cache/tags 不存在就新建
        if !isdirectory(s:vim_tags)
            silent! call mkdir(s:vim_tags, 'p')
        endif
    "}

    "leaderf {
        let g:Lf_WindowPosition = 'popup'
        let g:Lf_HideHelp = 1
        let g:Lf_PreviewInPopup = 1
    "}

    "fzf {
        let g:fzf_preview_window = 'right:60%'
        let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
        map <C-p> :GFiles <CR>
        map <C-q> :Buffers <CR>
    "}

    "vimls{
        let g:markdown_fenced_languages = [
                    \ 'vim',
                    \ 'help'
                    \]
    "}

    "asyncrun{
        let g:asyncrun_mode='term'
    "}

    "vim-translator {
        nmap <silent> <Leader>t <Plug>TranslateW
		" Text highlight of translator window
		hi def link TranslatorQuery             Identifier
		hi def link TranslatorDelimiter         Special
		hi def link TranslatorExplain           Statement
		" Background of translator window border
		hi def link Translator                  Normal
		hi def link TranslatorBorder            NormalFloat
    "}

    "vim-floaterm{
        let g:floaterm_wintype = 'split'
        let g:floaterm_height = 18
        nnoremap <silent> <leader><space> :FloatermToggle<CR>
        tnoremap <silent> <leader><space> <C-\><C-n>:FloatermToggle<CR>
    "}

    "HTML {
        au BufNewFile,BufRead *.html,*.js,*.vue,*.jsx let g:user_emmet_expandabbr_key = '<C-e>'
        au BufNewFile,BufRead *.html,*.js,*.vue,*.jsx set tabstop=2
        au BufNewFile,BufRead *.html,*.js,*.vue,*.jsx set softtabstop=2
        au BufNewFile,BufRead *.html,*.js,*.vue,*.jsx set shiftwidth=2
        au BufNewFile,BufRead *.html,*.js,*.vue,*.jsx set expandtab
        "au BufNewFile,BufRead *.html,*.js,*.vue,*.jsx set autoindent
        au BufNewFile,BufRead *.html,*.js,*.vue,*.jsx set fileformat=unix
        "au BufNewFile,BufRead *.html,*.js,*.vue,*.jsx set nocindent
        au BufNewFile,BufRead *.vue set filetype=vue
        let g:vim_vue_plugin_load_full_syntax = 1
        let g:vim_vue_plugin_use_foldexpr = 1
        let g:vim_vue_plugin_highlight_vue_attr = 1
        let g:vim_vue_plugin_highlight_vue_keyword = 1
    "}

    "Haskell {
        let hs_highlight_boolean = 1
        let hs_highlight_type = 1
        let hs_highlight_more_types = 1
        let hs_highlight_debug = 1
        let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
        let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
        let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
        let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
        let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
        let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
        let g:haskell_backpack = 1                " to enable highlighting of backpack keywords
        let g:haskell_indent_if = 3
        let g:haskell_indent_case = 2
        let g:haskell_indent_let = 4
        let g:haskell_indent_where = 6
        let g:haskell_indent_do = 3
        let g:haskell_indent_in = 1
        let g:haskell_indent_guard = 2
    "}

    "vim-go {
        let g:go_auto_type_info = 1
        let g:go_code_completion_enabled = 0
        let g:go_def_reuse_buffer = 0
        let g:go_def_mapping_enabled = 0
        let g:go_doc_popup_window = 1
        let g:go_doc_keywordprg_enabled = 0
        let g:go_fmt_autosave = 0
        let g:go_metalinter_command = "golangci-lint"
        let g:go_fmt_command = "goimports"
        let g:go_info_mode = 'gopls'
        let g:go_highlight_functions = 1
        let g:go_highlight_types = 1
        let g:go_highlight_structs = 1
        let g:go_highlight_operators = 1
        let g:go_highlight_format_strings = 1
        let g:go_highlight_build_constraints = 1
        let g:go_highlight_fields = 1
        let g:go_fold_enable = ['block', 'import', 'varconst', 'package_comment']
        "au FileType go set nofoldenable
        au FileType go nmap <leader>2 :GoFmt<CR>
        au FileType go nmap <leader>3 :GoTestFunc<CR>
        au FileType go nmap <leader>4 :GoTest<CR>
        au FileType go nmap <leader>5 :GoRun<CR>
    "}

    "Rust {
        autocmd FileType rust nmap <leader>2 :RustFmt<CR>
        autocmd FileType rust nmap <leader>3 :RustTest<CR>
        autocmd FileType rust nmap <leader>4 :RustTest!<CR>
        autocmd FileType rust nmap <leader>5 :Cargo run<CR>
    "}

    "Cpp/C {
        let g:cmake_build_dir = 'build'
        autocmd FileType c,cpp nmap <leader>4 :CMake<CR>
        autocmd FileType c,cpp nmap <leader>5 :make<CR>
        autocmd FileType c,cpp,rust packadd termdebug
    "}

"} Plugin-wise Configuration
    if (g:use_nvim_lsp == 1)
        call EnableLSP()
    else
        call EnableCoc()
    endif
    command! -nargs=0 EnableLSP :call EnableLSP()
    command! -nargs=0 EnableCoc :call EnableCoc()
endif
